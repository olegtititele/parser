import logging

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, \
	ReplyKeyboardMarkup, KeyboardButton, \
	InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text


from sqlite.sqlighter import SQLighter
import config.config as cf
from countries.bolhasi import BolhaSI
from countries.bazarlu import BazarLu
from keyboards import *

from datetime import datetime, timedelta
import threading, time, sys
from threading import *
from create_bot import dp, bot
from handlers.dynamicload import DynamicLoading
logging.basicConfig(level=logging.INFO)

# bot = Bot(token=cf.BOT_TOKEN)
# dp = Dispatcher(bot, storage=MemoryStorage())

db = SQLighter()

class Timer:
	stop = False

	async def start(self):
		ii = 0
		while not self.stop:
			ii += 1
			print(ii)
			time.sleep(1)
		return ii

# States
class Form(StatesGroup):
	country = State()
	link = State()
	adv_count = State()
	seller_adv = State()
	business = State()
	adv_reg_data = State()
	reg_seller_data = State()
	repeated_number = State()


from handlers import client, admin, other

client.register_handlers_client(dp)
other.register_handlers_other(dp)


@dp.message_handler(state='*', commands='exit')
@dp.message_handler(Text(equals='exit', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
	"""
	Allow user to cancel any action
	"""
	current_state = await state.get_state()
	if current_state is None:
		return

	logging.info('Cancelling state %r', current_state)
	# Cancel state and inform user about it
	await state.finish()
	# And remove keyboard (just in case)
	username = f'<a href="https://t.me/+{message.from_user.username}">{message.from_user.first_name}</a>'
	await bot.send_message(message.chat.id, "<b>"+username+" , –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é</b>", parse_mode=types.ParseMode.HTML, reply_markup=start_pars_kb,disable_web_page_preview=True)


# –°—Å—ã–ª–∫–∞
@dp.message_handler(lambda message: message.text.isdigit(), state=Form.link)
async def process_link_invalid(message: types.Message):
	return await bot.send_message(message.chat.id, "<b>‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</b>", parse_mode="HTML")

@dp.message_handler(state=Form.link)
async def process_link(message: types.Message, state: FSMContext):
	link = message.text
	async with state.proxy() as data:
		platform = data['country']
	if platform in link:
		async with state.proxy() as data:	
			data['link'] = link
		await Form.next()
		await bot.send_message(message.chat.id, "<b>üìå –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞:</b>\n\n–ü—Ä–∏–º–µ—Ä: <i>100</i>\n\n<i>–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ</i> /exit", parse_mode="HTML")
	else:
		await process_link_invalid(message)	


# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
@dp.message_handler(lambda message: not message.text.isdigit(), state=Form.adv_count)
async def process_adv_count_invalid(message: types.Message):
	return await bot.send_message(message.chat.id, "<b>‚ùóÔ∏è –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–∏—Ñ—Ä–æ–π. –í–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.</b>", parse_mode="HTML")

@dp.message_handler(lambda message: message.text.isdigit(), state=Form.adv_count)
async def process_adv_count(message: types.Message, state: FSMContext):
	await Form.next()
	await state.update_data(adv_count=int(message.text))
	return await bot.send_message(message.chat.id, "<b>üî∑ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∫–æ–ª-–≤–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–æ–¥–∞–≤—Ü–∞</b>\n\n–ü—Ä–∏–º–µ—Ä: 10 <i>(–ø–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —É –∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–ª-–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 10)\n\n–ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä –Ω–∞–∂–º–∏—Ç–µ</i> <b>'–ù–µ—Ç'</b>\n\n<i>–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ</i> /exit", parse_mode=types.ParseMode.HTML, reply_markup=seller_adv_kb, disable_web_page_preview=True)

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–æ–¥–∞–≤—Ü–∞
@dp.message_handler(lambda message: not message.text.isdigit() and message.text not in ["–ù–µ—Ç", "–Ω–µ—Ç"], state=Form.seller_adv)
async def process_seller_adv_invalid(message: types.Message):
	return await bot.send_message(message.chat.id, "<b>‚ùóÔ∏è –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–∏—Ñ—Ä–æ–π –∏–ª–∏ '–ù–µ—Ç'. –í–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.</b>", parse_mode="HTML")

@dp.message_handler(state=Form.seller_adv)
async def process_seller_adv(message: types.Message, state: FSMContext):

	async with state.proxy() as data:
		data['seller_adv'] = message.text

	await Form.next()
	await bot.send_message(message.chat.id, "<b>üë®üèª‚Äçüíª –£–±—Ä–∞—Ç—å –±–∏–∑–Ω–µ—Å –∞–∫–∫–∞—É–Ω—Ç—ã?</b>\n\n<i>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä –Ω–∞–∂–º–∏—Ç–µ</i> <b>'–î–∞'</b>\n\n<i>–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∞—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä –Ω–∞–∂–º–∏—Ç–µ</i> <b>'–ù–µ—Ç'</b>\n\n<i>–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ</i> /exit", parse_mode=types.ParseMode.HTML, reply_markup=business_kb, disable_web_page_preview=True)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–∑–Ω–µ—Å—Å –∞–∫–∫–∞—É–Ω—Ç–∞
@dp.message_handler(lambda message: message.text.isdigit() or message.text not in ["–ù–µ—Ç", "–Ω–µ—Ç", "–î–∞", "–¥–∞"], state=Form.business)
async def process_business_invalid(message: types.Message):
	return await bot.send_message(message.chat.id, "<b>‚ùóÔ∏è –ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.</b>", parse_mode="HTML")

@dp.message_handler(state=Form.business)
async def process_business(message: types.Message, state: FSMContext):

	async with state.proxy() as data:
		data['business'] = message.text

	await Form.next()
	# await bot.send_message(message.chat.id, data['link']+data['seller_adv']+data['business'])
	await bot.send_message(message.chat.id, "üóì<b> –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n</b><i>‚úÖ–ü—Ä–∏–º–µ—Ä: 01.01.2022 (–ø–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —Å 01.01.2022 –ø–æ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É)</i>\n\n<b>–ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä –Ω–∞–∂–º–∏—Ç–µ '–ù–µ—Ç'</b>\n\n<i>–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ</i> /exit", parse_mode=types.ParseMode.HTML, reply_markup=seller_adv_kb, disable_web_page_preview=True)


# –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@dp.message_handler(lambda message: message.text.isdigit(), state=Form.adv_reg_data)
async def process_adv_reg_data_invalid(message: types.Message):
	return await bot.send_message(message.chat.id, "<b>‚ùóÔ∏è –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ '–î–î.–ú–ú.–ì–ì–ì–ì' –∏–ª–∏ '–ù–µ—Ç'\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ.</b>", parse_mode="HTML")

async def process_adv_next_step(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data['adv_reg_data'] = message.text
		await Form.next()
		await bot.send_message(message.chat.id, "üóì<b> –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞\n\n</b><i>‚úÖ–ü—Ä–∏–º–µ—Ä: 01.01.2022 (–ø–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å —Å 01.01.2022 –ø–æ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É)</i>\n\n<b>–ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä –Ω–∞–∂–º–∏—Ç–µ '–ù–µ—Ç'</b>\n\n<i>–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ</i> /exit", parse_mode=types.ParseMode.HTML, reply_markup=seller_adv_kb, disable_web_page_preview=True)

@dp.message_handler(state=Form.adv_reg_data)
async def process_adv_reg_data(message: types.Message, state: FSMContext):
	try:
		if message.text in ["–ù–µ—Ç", "–Ω–µ—Ç", "–î–∞", "–¥–∞"]:
			await process_adv_next_step(message, state)
		else:
			datetime.strptime(message.text, '%d.%m.%Y')
			await process_adv_next_step(message, state)
		
	except Exception as e:
		print(repr(e))
		await process_adv_reg_data_invalid(message)

# –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞
@dp.message_handler(lambda message: message.text.isdigit(), state=Form.reg_seller_data)
async def process_seller_reg_data_invalid(message: types.Message):
	return await bot.send_message(message.chat.id, "<b>‚ùóÔ∏è –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ '–î–î.–ú–ú.–ì–ì–ì–ì' –∏–ª–∏ '–ù–µ—Ç'\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ.</b>", parse_mode="HTML")

async def process_seller_next_step(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data['reg_seller_data'] = message.text
		await Form.next()
		await bot.send_message(message.chat.id, "üóì<b> –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º—Å—è –Ω–æ–º–µ—Ä–æ–º?</b>\n\n<i>–ï—Å–ª–∏ –≤—ã –Ω–∞–∂–º–µ—Ç–µ </i><b>'–î–∞'</b><i>, —Ç–æ –±–æ—Ç —Å–º–æ–∂–µ—Ç –ø–∞—Ä—Å–∏—Ç—å –¥—Ä—É–≥–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞.\n\n –ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä –Ω–∞–∂–º–∏—Ç–µ </i><b>'–ù–µ—Ç'</b>\n\n<i>–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ</i> /exit", parse_mode=types.ParseMode.HTML, reply_markup=business_kb, disable_web_page_preview=True)

@dp.message_handler(state=Form.reg_seller_data)
async def process_seller_reg_data(message: types.Message, state: FSMContext):
	try:
		if message.text in ["–ù–µ—Ç", "–Ω–µ—Ç", "–î–∞", "–¥–∞"]:
			await process_seller_next_step(message, state)
		else:
			datetime.strptime(message.text, '%d.%m.%Y')
			await process_seller_next_step(message, state)
		
	except Exception as e:
		print(repr(e))
		await process_seller_reg_data_invalid(message)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –Ω–æ–º–µ—Ä–∞
@dp.message_handler(lambda message: message.text.isdigit() or message.text not in ["–ù–µ—Ç", "–Ω–µ—Ç", "–î–∞", "–¥–∞"], state=Form.repeated_number)
async def process_repeated_number_invalid(message: types.Message):
	return await bot.send_message(message.chat.id, "<b>‚ùóÔ∏è –ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.</b>", parse_mode="HTML")

@dp.message_handler(state=Form.repeated_number)
async def process_repeated_number(message: types.Message, state: FSMContext):

	async with state.proxy() as data:
		data['repeated_number'] = message.text

	business_kb = types.ReplyKeyboardRemove()
	await bot.send_message(message.chat.id, f"üì§ <b>–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: </b>\n\n<b>–ü–ª–æ—â–∞–¥–∫–∞: </b><code>{data['country']}</code>\n\n<b>–°—Å—ã–ª–∫–∞: </b><code>{data['link']}</code>\n\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: </b><code>{data['adv_count']}</code>\n\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–æ–¥–∞–≤—Ü–∞: </b><code>{data['seller_adv']}</code>\n\n<b>–ë–∏–∑–Ω–µ—Å—Å –∞–∫–∫–∞—É–Ω—Ç: </b><code>{data['business']}</code>\n\n<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: </b><code>{data['adv_reg_data']}</code>\n\n<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞: </b><code>{data['reg_seller_data']}</code>\n\n<b>–ü–æ–≤—Ç–æ—Ä—è—Ç—å –Ω–æ–º–µ—Ä–∞: </b><code>{data['repeated_number']}</code>\n\n<b>–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ </b>/exit", parse_mode=types.ParseMode.HTML, reply_markup=start_pa)


@dp.callback_query_handler()
async def process_callback_button1(call: types.CallbackQuery, state: FSMContext):

	for key in cf.COUNTRIES_SITES:
		if call.data == key:
			for cnt in cf.COUNTRIES_SITES[key]:
				show_sites_kb = types.InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
				item = types.InlineKeyboardButton(cnt, callback_data=cnt)
				show_sites_kb.add(item)
				await call.message.edit_text(text="<b>üåê –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É, –≥–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.</b>", parse_mode=types.ParseMode.HTML, reply_markup=show_sites_kb)

	for key in cf.COUNTRIES_SITES:
		for cnt in cf.COUNTRIES_SITES[key]:
			if call.data == cnt:
				if(not db.check_subscriber(cnt, call.from_user.id)):
					db.add_subscriber(cnt, call.from_user.id)
					await create_price_keyboard(call, cnt)
				else:
					if db.get_subscriber_time(cnt, call.from_user.id) <= datetime.now():
						await create_price_keyboard(call, cnt)
					else:
						await call.message.edit_text(text=await choose_user_link(call, cnt), parse_mode=types.ParseMode.HTML, disable_web_page_preview = True)
						async with state.proxy() as data:
							data['country'] = cnt
						await Form.link.set()

	for key in cf.COUNTRIES_SITES:
		for cnt in cf.COUNTRIES_SITES[key]:
			for pr in cf.PRICES:
				if call.data == cnt + str(cf.PRICES[pr]):
					new_date = db.get_subscriber_time(cnt, call.from_user.id) + timedelta(days=cf.PRICES[pr])
					db.update_subsc_time(call.from_user.id, new_date, cnt)
					if cf.PRICES[pr] == 1:
						line = '<b>üîë –í—ã –ø—Ä–µ–æ–±—Ä–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ </b><b>'+ str(cf.PRICES[pr]) +'</b> <b>–¥–µ–Ω—å.</b>'
					elif cf.PRICES[pr] == 3:
						line = '<b>üîë –í—ã –ø—Ä–µ–æ–±—Ä–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ </b><b>'+ str(cf.PRICES[pr]) +'</b> <b>–¥–Ω—è.</b>'
					elif cf.PRICES[pr] == 7 or cf.PRICES[pr] == 30:
						line = '<b>üîë –í—ã –ø—Ä–µ–æ–±—Ä–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ </b><b>'+ str(cf.PRICES[pr]) +'</b> <b>–¥–Ω–µ–π.</b>'
					await call.message.edit_text(text=line, parse_mode=types.ParseMode.HTML)

	for key in cf.COUNTRIES_SITES:
		for cnt in cf.COUNTRIES_SITES[key]:
			if call.data == "previously"+cnt:
				callshow = cnt+'show_data'
				callclear = cnt+'clear_data'
				show_data_btn = InlineKeyboardButton('‚úàÔ∏è‚Äã‚Äã –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è üìÉ', callback_data=callshow)
				clear_data_btn = InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data=callclear)
				data_kb = InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
				data_kb.add(show_data_btn, clear_data_btn)
				await call.message.edit_text(text="<b>‚ÄºÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏</b>", parse_mode=types.ParseMode.HTML, disable_web_page_preview = True, reply_markup=data_kb)

	for key in cf.COUNTRIES_SITES:
		for cnt in cf.COUNTRIES_SITES[key]:
			if call.data == cnt+'show_data':
				for usl in db.get_previously_adv(call.from_user.id, cnt):
					whatsapp_number = usl[8].replace(' ', '')
					if usl[0] == "bolha.com":
						whatsapp = f'<a href="https://api.whatsapp.com/send?phone={whatsapp_number}&text=≈Ωivjo, to ≈æelim kupiti. V dobrem stanju? {usl[4]}">üü¢ WhatsApp</a>'
					elif usl[0] == "bazar.lu":
						whatsapp = f'<a href="https://api.whatsapp.com/send?phone={whatsapp_number}&text=Hallo,%20ich%20m√∂chte%20das%20kaufen.%20In%20guter%20Kondition?%20{usl[4]}">üü¢ WhatsApp</a>'
					viber_number = usl[8].split("+")[1].replace(' ', '')
					adv_link = f'<a href="{usl[4]}">üîë –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a>'
					image_link = f'<a href="{usl[6]}">üóæ –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</a>'
					viber = f'<a href="https://viber.click/{viber_number}">üü£ Viber</a>'
					await bot.send_photo(call.message.chat.id, usl[6], caption="<b>üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: </b><code>"+usl[1]+"</code>\n<b>üí≥ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: </b><code>"+usl[2]+"</code>\n<b>üåè –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: </b><code>"+usl[5]+"</code>\n<b>üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: </b><code>"+usl[3]+"</code>\n\n"+adv_link+"\n"+image_link+"\n\n<b>üôéüèª‚Äç‚ôÇÔ∏è –ò–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞: </b><code>"+usl[7]+"</code>\n<b>üìû –ù–æ–º–µ—Ä –ø—Ä–æ–¥–∞–≤—Ü–∞:</b> <code>"+usl[8]+"</code>\n\n"+whatsapp+"\n"+viber+"\n\n<b>üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–æ–¥–∞–≤—Ü–∞: </b><code>"+usl[9]+"</code>\n<b>üìÜ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞: </b><code>"+usl[10]+"</code>\n<b>üìÉ –ë–∏–∑–Ω–µ—Å—Å –∞–∫–∫–∞—É–Ω—Ç: </b><code>"+usl[11]+"</code>", parse_mode="HTML")
					time.sleep(0.5)
			elif call.data == cnt+"clear_data":
				db.delete_previously_adv(call.from_user.id, cnt)
				await call.message.edit_text(text="<b>üö¨ –†–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø–ª–æ—â–∞–¥–∫–∏ </b><code>"+cnt+"</code><b> —É–¥–∞–ª–µ–Ω—ã</b>", parse_mode=types.ParseMode.HTML, disable_web_page_preview = True)

	if call.data == 'show_hash':
		for usl in db.get_hash_data(call.from_user.id):
			whatsapp_number = usl[8].replace(' ', '')
			if usl[0] == "bolha.com":
				whatsapp = f'<a href="https://api.whatsapp.com/send?phone={whatsapp_number}&text=≈Ωivjo, to ≈æelim kupiti. V dobrem stanju? {usl[4]}">üü¢ WhatsApp</a>'
			elif usl[0] == "bazar.lu":
				whatsapp = f'<a href="https://api.whatsapp.com/send?phone={whatsapp_number}&text=Hallo,%20ich%20m√∂chte%20das%20kaufen.%20In%20guter%20Kondition?%20{usl[4]}">üü¢ WhatsApp</a>'
			viber_number = usl[8].split("+")[1].replace(' ', '')
			adv_link = f'<a href="{usl[4]}">üîë –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a>'
			image_link = f'<a href="{usl[6]}">üóæ –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</a>'
			viber = f'<a href="https://viber.click/{viber_number}">üü£ Viber</a>'
			await bot.send_photo(call.message.chat.id, usl[6], caption="<b>üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: </b><code>"+usl[1]+"</code>\n<b>üí≥ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: </b><code>"+usl[2]+"</code>\n<b>üåè –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: </b><code>"+usl[5]+"</code>\n<b>üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: </b><code>"+usl[3]+"</code>\n\n"+adv_link+"\n"+image_link+"\n\n<b>üôéüèª‚Äç‚ôÇÔ∏è –ò–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞: </b><code>"+usl[7]+"</code>\n<b>üìû –ù–æ–º–µ—Ä –ø—Ä–æ–¥–∞–≤—Ü–∞:</b> <code>"+usl[8]+"</code>\n\n"+whatsapp+"\n"+viber+"\n\n<b>üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–æ–¥–∞–≤—Ü–∞: </b><code>"+usl[9]+"</code>\n<b>üìÜ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞: </b><code>"+usl[10]+"</code>\n<b>üìÉ –ë–∏–∑–Ω–µ—Å—Å –∞–∫–∫–∞—É–Ω—Ç: </b><code>"+usl[11]+"</code>", parse_mode="HTML")
			time.sleep(0.5)
		
		await bot.send_message(call.message.chat.id, "üü¢ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω", parse_mode="HTML", reply_markup=start_pars_kb)
		db.clear_hash_data(call.from_user.id)


	elif call.data == "clear_hash":
		db.clear_hash_data(call.from_user.id)
		await call.message.edit_text(
			text="üö¨ –ö—ç—à –æ—á–∏—â–µ–Ω")	



			


@dp.callback_query_handler(state=Form.repeated_number)
async def start_pars_button1(call: types.CallbackQuery, state: FSMContext):
	async with state.proxy() as data:
		platform = data['country']
		link = data['link']
		adv_count = data['adv_count']
		seller_adv = data['seller_adv']
		adv_reg_data = data['adv_reg_data']
		reg_seller_data = data['reg_seller_data']
		business = data['business']
		repeated_number = data['repeated_number']

# BOLHA.COM
	if platform == "bolha.com":
# 		bolha = BolhaSI(call.from_user.id, platform, link, adv_count, seller_adv, adv_reg_data, reg_seller_data, business, repeated_number)
		dyn_load = DynamicLoading()
# 		thread_pars = Thread(target=bolha.generate_link)
# 		thread_pars = Thread(target=await dyn_load.start_loop(call, state))
		if call.data == 'start_pars':
			await call.message.edit_text(text="‚åõÔ∏è –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞—á–∞–ª—Å—è. –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.", parse_mode=types.ParseMode.HTML)
# 			thread_pars.start()
			await dyn_load.start_loop(call, state)

		elif call.data == "stop_parser":
			print("–í—ã—à–µ–ª")
# 			dyn_load.loopflag = False
# 			return
# 			await call.message.edit_text(text="‚åõÔ∏è dddddddddd", parse_mode=types.ParseMode.HTML)
# 			bolha.stop_pars()
			await dyn_load.stop_loop(call, state)	


# BAZAR.LU
# 	elif platform == "bazar.lu":
# 		bazar = BazarLu(call.from_user.id, platform, link, adv_count, seller_adv, adv_reg_data, reg_seller_data, business, repeated_number)
# 		dyn_load = DynamicLoading(call.from_user.id)
# # 		thread_pars = Thread(target=bazar.get_parameters)

# 		if call.data == 'start_pars':
# 			await call.message.edit_text(text="‚åõÔ∏è –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞—á–∞–ª—Å—è. –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.", parse_mode=types.ParseMode.HTML)
# # 			thread_pars.start()
# 			await dyn_load.start_loop(call, state)

# 		elif call.data == "stop_parser":
# 			print("–í—ã—à–µ–ª")
# # 			return
# 			bazar.stop_pars()
# # 			await dyn_load.stop_loop(call, state)

# async def loop_test(call):
# 	while True:
# 		print(call.from_user.id)
# 		time.sleep(1)

async def create_price_keyboard(call, platform):
	show_prices_kb = types.InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
	for key in cf.PRICES:
		callback_data = platform + str(cf.PRICES[key])
		item = types.InlineKeyboardButton(key, callback_data=callback_data)
		show_prices_kb.add(item)
	await call.message.edit_text(text="üî¥ <b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞\n\nüîµ –ü–ª–æ—â–∞–¥–∫–∞: </b><code>"+platform+"</code>\n\nüîµ <b>–¢–≤–æ–π id - </b><code>"+str(call.from_user.id)+"</code>\n\nüü° <b>–¶–µ–Ω–∞ 4500‚ÇΩ (30 –¥–Ω–µ–π)</b>\nüü° <b>–¶–µ–Ω–∞ 1500‚ÇΩ (7 –¥–Ω–µ–π)</b>\nüü° <b>–¶–µ–Ω–∞ 700‚ÇΩ (3 –¥–Ω—è)</b>\nüü° <b>–¶–µ–Ω–∞ 350‚ÇΩ (1 –¥–µ–Ω—å)</b>", parse_mode=types.ParseMode.HTML, reply_markup=show_prices_kb)	


async def choose_user_link(call, platform):
	if platform == "bolha.com":
		country_url = 'https://www.bolha.com/avdio-in-video'
		line = "üñå<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Å—ã–ª–∫—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∏–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ</b>\n"+"\n<i>–ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏: </i>"+country_url+"\n\n<i>–ü—Ä–∏–º–µ—Ä —Å–ª–æ–≤–∞:</i> <b>apple</b>\n\n<i>–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ</i> /exit"
		return line
	elif platform == "bazar.lu":
		country_url = 'https://www.bazar.lu/Scripts/sql.exe?SqlDB=bazar&Sql=Search.phs&category=30'
		line = "üñå<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Å—ã–ª–∫—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π</b>\n"+"\n<i>–ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏: </i>"+country_url+"\n\n<i>–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ</i> /exit"
		return line


if __name__ == '__main__':
	executor.start_polling(dp, skip_updates=True)
