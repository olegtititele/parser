import logging
import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, \
	ReplyKeyboardMarkup, KeyboardButton, \
	InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text


from sqlite.sqlighter import SQLighter
import config.config as cf
from countries.bolhasi import BolhaSI
from countries.bazarlu import BazarLu
from countries.gumtreecoza import GumtreeCoZa
from keyboards import *

from datetime import datetime, timedelta
import threading, time, sys
from threading import *
from multiprocessing import Process
from create_bot import dp, bot
from handlers.dynamicload import DynamicLoading
logging.basicConfig(level=logging.INFO)

db = SQLighter()
photo = open('mainmenu.jpg', 'rb')


from handlers import client, admin, other
from handlers.other import Form

client.register_handlers_client(dp)
other.register_handlers_other(dp)

# @dp.callback_query_handler(state='*')
# async def cancel_handler(call: types.CallbackQuery, state: FSMContext):
# 	if call.data == 'close_state':
# 		current_state = await state.get_state()
# 		if current_state is None:
# 			return

# 		logging.info('Cancelling state %r', current_state)
# 		await state.finish()
# 		await bot.send_photo(chat_id=call.from_user.id, photo=photo, caption=f"üÜî <b>–í–∞—à –∏–¥:</b> <code>{call.from_user.id}</code>", parse_mode=types.ParseMode.HTML, reply_markup=main_kb)

# –°—Å—ã–ª–∫–∞
@dp.message_handler(lambda message: message.text.isdigit(), state=Form.link)
async def process_link_invalid(message: types.Message):
	return await bot.send_message(message.chat.id, "<b>‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</b>", parse_mode="HTML")

@dp.message_handler(state=Form.link)
async def process_link(message: types.Message, state: FSMContext):
	link = message.text
	async with state.proxy() as data:
		platform = data['country']
	if platform in link:
		async with state.proxy() as data:	
			data['link'] = link
		await Form.next()
		await bot.send_message(message.chat.id, "<b>üìå –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞:</b>\n\n–ü—Ä–∏–º–µ—Ä: <i>100</i>\n\n<i>–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ</i> /exit", parse_mode="HTML")
	else:
		await process_link_invalid(message)	


# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
@dp.message_handler(lambda message: not message.text.isdigit() or int(message.text) > 100, state=Form.adv_count)
async def process_adv_count_invalid(message: types.Message):
	return await bot.send_message(message.chat.id, "<b>‚ùóÔ∏è –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–∏—Ñ—Ä–æ–π –∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 100. –í–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.</b>", parse_mode="HTML")

@dp.message_handler(lambda message: message.text.isdigit(), state=Form.adv_count)
async def process_adv_count(message: types.Message, state: FSMContext):
	await Form.next()
	await state.update_data(adv_count=int(message.text))
	return await bot.send_message(message.chat.id, "<b>üî∑ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∫–æ–ª-–≤–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–æ–¥–∞–≤—Ü–∞</b>\n\n–ü—Ä–∏–º–µ—Ä: 10 <i>(–ø–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —É –∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–ª-–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –±—É–¥–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 10)\n\n–ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä –Ω–∞–∂–º–∏—Ç–µ</i> <b>'–ù–µ—Ç'</b>\n\n<i>–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ</i> /exit", parse_mode=types.ParseMode.HTML, reply_markup=seller_adv_kb, disable_web_page_preview=True)

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–æ–¥–∞–≤—Ü–∞
@dp.message_handler(lambda message: not message.text.isdigit() and message.text not in ["–ù–µ—Ç", "–Ω–µ—Ç"], state=Form.seller_adv)
async def process_seller_adv_invalid(message: types.Message):
	return await bot.send_message(message.chat.id, "<b>‚ùóÔ∏è –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–∏—Ñ—Ä–æ–π –∏–ª–∏ '–ù–µ—Ç'. –í–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.</b>", parse_mode="HTML")

@dp.message_handler(state=Form.seller_adv)
async def process_seller_adv(message: types.Message, state: FSMContext):

	async with state.proxy() as data:
		data['seller_adv'] = message.text

	await Form.next()
	await bot.send_message(message.chat.id, "<b>üë®üèª‚Äçüíª –£–±—Ä–∞—Ç—å –±–∏–∑–Ω–µ—Å –∞–∫–∫–∞—É–Ω—Ç—ã?</b>\n\n<i>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä –Ω–∞–∂–º–∏—Ç–µ</i> <b>'–î–∞'</b>\n\n<i>–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∞—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä –Ω–∞–∂–º–∏—Ç–µ</i> <b>'–ù–µ—Ç'</b>\n\n<i>–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ</i> /exit", parse_mode=types.ParseMode.HTML, reply_markup=business_kb, disable_web_page_preview=True)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–∑–Ω–µ—Å—Å –∞–∫–∫–∞—É–Ω—Ç–∞
@dp.message_handler(lambda message: message.text.isdigit() or message.text not in ["–ù–µ—Ç", "–Ω–µ—Ç", "–î–∞", "–¥–∞"], state=Form.business)
async def process_business_invalid(message: types.Message):
	return await bot.send_message(message.chat.id, "<b>‚ùóÔ∏è –ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.</b>", parse_mode="HTML")

@dp.message_handler(state=Form.business)
async def process_business(message: types.Message, state: FSMContext):

	async with state.proxy() as data:
		data['business'] = message.text

	await Form.next()
	# await bot.send_message(message.chat.id, data['link']+data['seller_adv']+data['business'])
	await bot.send_message(message.chat.id, "üóì<b> –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n</b><i>‚úÖ–ü—Ä–∏–º–µ—Ä: 01.01.2022 (–ø–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —Å 01.01.2022 –ø–æ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É)</i>\n\n<b>–ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä –Ω–∞–∂–º–∏—Ç–µ '–ù–µ—Ç'</b>\n\n<i>–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ</i> /exit", parse_mode=types.ParseMode.HTML, reply_markup=seller_adv_kb, disable_web_page_preview=True)


# –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@dp.message_handler(lambda message: message.text.isdigit(), state=Form.adv_reg_data)
async def process_adv_reg_data_invalid(message: types.Message):
	return await bot.send_message(message.chat.id, "<b>‚ùóÔ∏è –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ '–î–î.–ú–ú.–ì–ì–ì–ì' –∏–ª–∏ '–ù–µ—Ç'\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ.</b>", parse_mode="HTML")

async def process_adv_next_step(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data['adv_reg_data'] = message.text
		await Form.next()
		await bot.send_message(message.chat.id, "üóì<b> –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞\n\n</b><i>‚úÖ–ü—Ä–∏–º–µ—Ä: 01.01.2022 (–ø–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å —Å 01.01.2022 –ø–æ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É)</i>\n\n<b>–ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä –Ω–∞–∂–º–∏—Ç–µ '–ù–µ—Ç'</b>\n\n<i>–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ</i> /exit", parse_mode=types.ParseMode.HTML, reply_markup=seller_adv_kb, disable_web_page_preview=True)

@dp.message_handler(state=Form.adv_reg_data)
async def process_adv_reg_data(message: types.Message, state: FSMContext):
	try:
		if message.text in ["–ù–µ—Ç", "–Ω–µ—Ç", "–î–∞", "–¥–∞"]:
			await process_adv_next_step(message, state)
		else:
			datetime.strptime(message.text, '%d.%m.%Y')
			await process_adv_next_step(message, state)
		
	except Exception as e:
		print(repr(e))
		await process_adv_reg_data_invalid(message)

# –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞
@dp.message_handler(lambda message: message.text.isdigit(), state=Form.reg_seller_data)
async def process_seller_reg_data_invalid(message: types.Message):
	return await bot.send_message(message.chat.id, "<b>‚ùóÔ∏è –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ '–î–î.–ú–ú.–ì–ì–ì–ì' –∏–ª–∏ '–ù–µ—Ç'\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ.</b>", parse_mode="HTML")

async def process_seller_next_step(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data['reg_seller_data'] = message.text
		await Form.next()
		await bot.send_message(message.chat.id, "üóì<b> –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º—Å—è –Ω–æ–º–µ—Ä–æ–º?</b>\n\n<i>–ï—Å–ª–∏ –≤—ã –Ω–∞–∂–º–µ—Ç–µ </i><b>'–î–∞'</b><i>, —Ç–æ –±–æ—Ç —Å–º–æ–∂–µ—Ç –ø–∞—Ä—Å–∏—Ç—å –¥—Ä—É–≥–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞.\n\n –ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä –Ω–∞–∂–º–∏—Ç–µ </i><b>'–ù–µ—Ç'</b>\n\n<i>–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ</i> /exit", parse_mode=types.ParseMode.HTML, reply_markup=business_kb, disable_web_page_preview=True)

@dp.message_handler(state=Form.reg_seller_data)
async def process_seller_reg_data(message: types.Message, state: FSMContext):
	try:
		if message.text in ["–ù–µ—Ç", "–Ω–µ—Ç", "–î–∞", "–¥–∞"]:
			await process_seller_next_step(message, state)
		else:
			datetime.strptime(message.text, '%d.%m.%Y')
			await process_seller_next_step(message, state)
		
	except Exception as e:
		print(repr(e))
		await process_seller_reg_data_invalid(message)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –Ω–æ–º–µ—Ä–∞
@dp.message_handler(lambda message: message.text.isdigit() or message.text not in ["–ù–µ—Ç", "–Ω–µ—Ç", "–î–∞", "–¥–∞"], state=Form.repeated_number)
async def process_repeated_number_invalid(message: types.Message):
	return await bot.send_message(message.chat.id, "<b>‚ùóÔ∏è –ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.</b>", parse_mode="HTML")

@dp.message_handler(state=Form.repeated_number)
async def process_repeated_number(message: types.Message, state: FSMContext):

	async with state.proxy() as data:
		data['repeated_number'] = message.text

	business_kb = types.ReplyKeyboardRemove()
	await bot.send_message(message.chat.id, f"üì§ <b>–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: </b>\n\n<b>–ü–ª–æ—â–∞–¥–∫–∞: </b><code>{data['country']}</code>\n\n<b>–°—Å—ã–ª–∫–∞: </b><code>{data['link']}</code>\n\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞: </b><code>{data['adv_count']}</code>\n\n<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–æ–¥–∞–≤—Ü–∞: </b><code>{data['seller_adv']}</code>\n\n<b>–ë–∏–∑–Ω–µ—Å—Å –∞–∫–∫–∞—É–Ω—Ç: </b><code>{data['business']}</code>\n\n<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: </b><code>{data['adv_reg_data']}</code>\n\n<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞: </b><code>{data['reg_seller_data']}</code>\n\n<b>–ü–æ–≤—Ç–æ—Ä—è—Ç—å –Ω–æ–º–µ—Ä–∞: </b><code>{data['repeated_number']}</code>", parse_mode=types.ParseMode.HTML, reply_markup=start_pa)
	


@dp.callback_query_handler(state=Form.repeated_number)
async def start_pars_button1(call: types.CallbackQuery, state: FSMContext):
	async with state.proxy() as data:
		platform = data['country']
		link = data['link']
		adv_count = data['adv_count']
		seller_adv = data['seller_adv']
		adv_reg_data = data['adv_reg_data']
		reg_seller_data = data['reg_seller_data']
		business = data['business']
		repeated_number = data['repeated_number']
		
	if call.data == 'close_state':
		current_state = await state.get_state()
		if current_state is None:
			return

		logging.info('Cancelling state %r', current_state)
		await state.finish()
		await bot.send_photo(chat_id=call.from_user.id, photo=photo, caption=f"üÜî <b>–í–∞—à –∏–¥:</b> <code>{call.from_user.id}</code>", parse_mode=types.ParseMode.HTML, reply_markup=main_kb)	

# BOLHA.COM
	if platform == "bolha.com":
		dyn_load = DynamicLoading()
		bolha = BolhaSI(call.from_user.id, platform, link, adv_count, seller_adv, adv_reg_data, reg_seller_data, business, repeated_number)
		thread_pars = Thread(target=bolha.generate_link)
		if call.data == 'start_pars':
			thread_pars.start()
			await dyn_load.start_loop(bolha, call, state)
			thread_pars.join()


# BAZAR.LU
	elif platform == "bazar.lu":
		dyn_load = DynamicLoading()
		bazar = BazarLu(call.from_user.id, platform, link, adv_count, seller_adv, adv_reg_data, reg_seller_data, business, repeated_number)
		thread_pars = Thread(target=bazar.get_parameters)
		if call.data == 'start_pars':
			thread_pars.start()
			await dyn_load.start_loop(bazar, call, state)
			thread_pars.join()

# GUMTREE.CO.ZA
	elif platform == "gumtree.co.za":
		dyn_load = DynamicLoading()
		gumtreecoza = GumtreeCoZa(call.from_user.id, platform, link, adv_count, seller_adv, adv_reg_data, reg_seller_data, business, repeated_number)
		thread_pars = Thread(target=gumtreecoza.generate_link)
		if call.data == 'start_pars':
			thread_pars.start()
			await dyn_load.start_loop(gumtreecoza, call, state)
			thread_pars.join()			



if __name__ == '__main__':
	executor.start_polling(dp, skip_updates=True)
